gnp=read.table("C:/Users/sweet-xingxing/Desktop/time series paper/lidong/R for MTAR/USGNP.txt")[,2]
fileName ='C:\ling\LING\TEX\Kellie\HSI.csv' #please specified your file path before using
count_buy = 0
count_sell = 0
#function definitions
getSB <- function(price, begin_year, alpha_buy, alpha_sell){
lrs=price[which(price['date']>(begin_year-sample_len)*10000 & price['date']<(begin_year)*10000),'lr']
#simulation for AR(1) model
data=function(n,theta){
b=arima.sim(n = 1000, list(ma=0.75,order=c(0,1,1)))
acf(b,20,main=expression(paste("ARIMA(0,1,1) models with ", theta[1]==0.75)),col="red")
pacf(b,20,main=expression(paste("ARIMA(0,1,1) models with ", theta[1]==0.75)),col="red")
db=diff(b)
acf(db,20,main= "Differencing for ARIMA(0,1,1) models" ,col="red")
acf(db,20,main= "Differencing for ARIMA(1,1,1) models" ,col="red")
pacf(db,20,main= "Differencing for ARIMA(1,1,1) models",col="red")
AP=c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118,
115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140,
145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166,
#plot(AP, ylab="Passengers (1000s)", type="o", pch =20,col="blue")
x=ts(AP, start = c(1949, 1), end = c(1960, 12), frequency=12)
plot.ts(x,xlab="date",ylab="Passengers",col="blue")
title(main="International Airline Passengers from 1949 to 1960")
data=function(n,theta){
m=200
noise=rnorm(n+m)
r=numeric(m+n)
for (i in 2:(m+n))
r[i]=theta[1]+theta[2]*r[i-1]+noise[i]
return(r[-(1:m)])
}
n=1000
#theta=c(0.5,0.2)
theta=c(0.5,-0.9)
sample=data(n,theta)
acf(sample,10,main=expression(paste("AR(1) with ", phi[1]==-0.9)),col="red")
###########################################
b=arima.sim(n = 1000, list(ar=c(0.6,0.3)))
acf(b,20,main=expression(paste("AR(2) with ", phi[1]==0.6," and ",phi[2]==0.3)),col="red")
##########################################
#simulation for ARIMA
b=arima.sim(n = 1000, list(ar=0.8,order=c(1,1,0)))
acf(b,20,main=expression(paste("ARIMA(1,1,0) models with ", phi[1]==0.8)),col="red")
pacf(b,20,main=expression(paste("ARIMA(1,1,0) models with ", phi[1]==0.8)),col="red")
db=diff(b)
acf(db,20,main= "Differencing for ARIMA(1,1,0) models" ,col="red")
pacf(db,20,main= "Differencing for ARIMA(1,1,0) models",col="red")
b=arima.sim(n = 1000, list(ma=0.75,order=c(0,1,1)))
acf(b,20,main=expression(paste("ARIMA(0,1,1) models with ", theta[1]==0.75)),col="red")
pacf(b,20,main=expression(paste("ARIMA(0,1,1) models with ", theta[1]==0.75)),col="red")
db=diff(b)
acf(db,20,main= "Differencing for ARIMA(0,1,1) models" ,col="red")
pacf(db,20,main= "Differencing for ARIMA(0,1,1) models",col="red")
b=arima.sim(n = 1000, list(ar=0.9,ma=0.5,order=c(1,1,1)))
acf(b,20,main=expression(paste("ARIMA(1,1,1) models with ", phi[1]==0.9, " and ",theta[1]==0.5)),col="red")
pacf(b,20,main=expression(paste("ARIMA(1,1,1) models with ", phi[1]==0.9, " and ",theta[1]==0.5)),col="red")
db=diff(b)
acf(db,20,main= "Differencing for ARIMA(1,1,1) models" ,col="red")
pacf(db,20,main= "Differencing for ARIMA(1,1,1) models",col="red")
db=diff(b)
acf(db,20,main= "Differencing for ARIMA(1,1,0) models" ,col="red")
pacf(db,20,main= "Differencing for ARIMA(1,1,0) models",col="red")
b=arima.sim(n = 1000, list(ma=0.75,order=c(0,1,1)))
AP=c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118,
115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140,
145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166,
171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194,
196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201,
204, 188, 235, 227, 234, 264, 302, 293, 259 ,229, 203, 229,
242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278,
284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306,
315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336,
340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337,
360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405,
417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432)
length(AP)#144
#plot(AP, ylab="Passengers (1000s)", type="o", pch =20,col="blue")
x=ts(AP, start = c(1949, 1), end = c(1960, 12), frequency=12)
plot.ts(x,xlab="date",ylab="Passengers",col="blue")
title(main="International Airline Passengers from 1949 to 1960")
#Step 1
lgAP=log(AP)
#Step 2
w1=diff(lgAP)
plot(w1,xlab=" ",ylab=" ",main="w1 ",type="l",col="red",ylim=c(-0.35,0.35))
w2=diff(lgAP,12)
plot(w2,xlab=" ",ylab=" ",main="w2 ",type="l",col="red",ylim=c(-0.1,0.35))
w3=diff(diff(lgAP,12))
plot(w3,xlab=" ",ylab=" ",main="w3 ",type="l",col="red",ylim=c(-0.35,0.35))
#fUnitRoots:
#adfTest(w3,lags=1,type=c("c"))
library(tseries)
adf.test(w3,k=1)
#Step 4 Choose p and q
acf(w3,15,main="",col="red",ylim=c(-0.5,1))
pacf(w3,15,main="",col="red",ylim=c(-0.5,1))
#step 5 Estimate the parameters
est=arima(w3, c(1, 0, 0), seasonal = list(order = c(1,0, 0), period = 12))
est
#Step 6: Diagnostic checking.
Box.test(est$residuals,lag=12,type="Ljung")
# pv=1-pchisq(13.89,10) #Compute p-value using 10 degrees of freedom
# pv
#Step 7: Try other models
est=arima(w3, c(0, 0, 1), seasonal = list(order = c(0,0,1), period = 12))
est
#Step 8: Model Selection
#
# est=arima(lgAP,c(0, 1, 1), seasonal = list(order = c(0,0,1), period = 12))
# est
#Step 9:Forecasting
forecast=predict(est, n.ahead =6)
U=forecast$pred +1.96 * forecast$se
L=forecast$pred - 1.96 * forecast$se
exp(forecast$pred)
exp(U)
exp(L)
#please run this file step by step and change some parameters on your need when necessary
#default constants if not specified
alpha_buy = 0.1
alpha_sell = 0.01
sample_len = 5
# for mean reversion method, long = 1, short = 0
# for momentum method, long = 0, short = 1
long = 1.0
short = 0.0
fileName ='C:\ling\LING\TEX\Kellie\HSI.csv' #please specified your file path before using
count_buy = 0
count_sell = 0
#function definitions
getSB <- function(price, begin_year, alpha_buy, alpha_sell){
lrs=price[which(price['date']>(begin_year-sample_len)*10000 & price['date']<(begin_year)*10000),'lr']
B=quantile(lrs,alpha_buy)
S=quantile(lrs,1-alpha_sell)
return(c(S,B))
}
getmSB <- function(year_range, alpha_buy, alpha_sell){
SB = c()
for(i in year_range){
SB = append(SB,getSB(price, i, alpha_buy, alpha_sell))
}
mSB = matrix(SB,2,end_year-begin_year+1)
mSB = t(mSB)
}
lookBack <- function(price, year_range, trading_range, alpha_buy, alpha_sell, long, short, draw = FALSE, full_record = FALSE){
AllRecords = matrix(0,length(trading_range),4,dimnames=list(1:length(trading_range),c("date","cash","position","total value")))
mSB = getmSB(year_range,alpha_buy, alpha_sell)
value_buy = 1.0
count_loss = 0
#print(mSB)
AllRecords[,1] = price[trading_range,1]
AllRecords[1,2] = 1.0
AllRecords[1,4] = 1.0
for(i in 2:length(trading_range)){
#duplicate position of yesterday
AllRecords[i,2]=AllRecords[i-1,2]
AllRecords[i,3]=AllRecords[i-1,3]
#calculate the net value of the portfolio
AllRecords[i,4]=AllRecords[i,2]+AllRecords[i,3]*price[trading_range[i],2]
#adjust the position when if it is necessary
year_index = floor(AllRecords[i,1]/10000) - begin_year + 1
S = mSB[year_index,1]
B = mSB[year_index,2]
if(price[trading_range[i],3] > S){
if(AllRecords[i,3]>0&&long==1){
count_sell = count_sell + 1
value_sell = AllRecords[i,4]
#print(paste("sell at ",AllRecords[i,1]))
if(value_sell<value_buy){
count_loss = count_loss + 1
}
}else if(AllRecords[i,3]==0&&short==1){
count_buy = count_buy + 1
value_buy = AllRecords[i,4]
#print(paste("buy at ",AllRecords[i,1]))
}
max_po = AllRecords[i,4]/price[trading_range[i],2]
AllRecords[i,3] = max_po * short
AllRecords[i,2] = AllRecords[i,4] - AllRecords[i,3] * price[trading_range[i],2]
}
if(price[trading_range[i],3] < B){
if(AllRecords[i,3]==0&&long==1){
count_buy = count_buy + 1
value_buy = AllRecords[i,4]
#print(paste("buy at ",AllRecords[i,1]))
}else if(AllRecords[i,3]>0&&short==1){
count_sell = count_sell + 1
value_sell = AllRecords[i,4]
#print(paste("sell at ",AllRecords[i,1]))
if(value_sell<value_buy){
count_loss = count_loss + 1
}
}
max_po = AllRecords[i,4]/price[trading_range[i],2]
AllRecords[i,3] = max_po * long
AllRecords[i,2] = AllRecords[i,4] - AllRecords[i,3] * price[trading_range[i],2]
}
}
if(draw){
print(count_buy)
print(count_sell)
print(count_loss)
all_dates = as.Date(as.character(AllRecords[,1] ),"%Y%m%d")
plot(all_dates,AllRecords[,4],type='l',xlab='time',ylab='Net Value')
}
if(full_record){
return(AllRecords)
}else{
return(AllRecords[nrow(AllRecords),4])
}
}
# STEP 1 - print out the tresholds in different years
price = read.csv("C:/Users/yangy/Desktop/r/HSI.csv")
begin_year = floor(price[1,'date']/10000) + sample_len
end_year = floor(price[nrow(price),'date']/10000)
year_range = begin_year:end_year
mSB = getmSB(year_range,alpha_buy, alpha_sell)
plot(year_range,mSB[,1],type='l',xlab='year',ylab='S/B',ylim=c(-0.1,0.1))
par(new=TRUE)
plot(year_range,mSB[,2],type='l',xlab='year',ylab='S/B',ylim=c(-0.1,0.1))
# STEP 2 trading on default parameters
trading_range = which(price['date']>(begin_year)*10000)
trading_record = lookBack(price, year_range, trading_range, alpha_buy=0.42, alpha_sell=0.43, long=0, short=1, draw = TRUE, full_record = TRUE)
# STEP 3 optimizing alpha_buy and alpha_sell
optimal_para = c(0,0) # alpha_buy, alpha_sell
optimal_value = -1
for(alpha_buy in (1:50/100)){
for(alpha_sell in (1:50/100)){
print(paste(alpha_buy,",",alpha_sell))
new_value = lookBack(price, year_range, trading_range, alpha_buy, alpha_sell, long, short, draw = FALSE, full_record = FALSE)
if(new_value>optimal_value){
optimal_value = new_value
optimal_para = c(alpha_buy, alpha_sell)
print(paste("max=",optimal_para))
}
}
}
print(paste("optimal parameters for long =",long,", short =", short, "is: alpha_buy =", optimal_para[1], ",alpha_sell =", optimal_para[2],";portfolio value =",optimal_value))
# STEP 4 trading on optimized parameters
trading_record = lookBack(price, year_range, trading_range, 0.13, 0.01, 1, 0, draw = TRUE, full_record = TRUE)
alpha_buy = 0.1
alpha_sell = 0.01
sample_len = 5
# for mean reversion method, long = 1, short = 0
# for momentum method, long = 0, short = 1
long = 1.0
short = 0.0
fileName ='C:\ling\LING\TEX\Kellie\HSI.csv' #please specified your file path before using
count_buy = 0
count_sell = 0
#function definitions
getSB <- function(price, begin_year, alpha_buy, alpha_sell){
lrs=price[which(price['date']>(begin_year-sample_len)*10000 & price['date']<(begin_year)*10000),'lr']
B=quantile(lrs,alpha_buy)
S=quantile(lrs,1-alpha_sell)
return(c(S,B))
}
