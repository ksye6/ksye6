noise=rnorm(n+m)
p=numeric(m+n)
w=numeric(m+n)
w1=numeric(m+n)
w2=numeric(m+n)
w3=numeric(m+n)
dr=numeric(m+n)
for (i in 14:(m+n))
w[i]=-0.8*noise[i-s]+noise[i]
for (i in 14:(m+n))
w1[i]=0.8*w1[i-s]+noise[i]
for (i in 14:(m+n))
w2[i]=-0.5*noise[i-1]-0.8*noise[i-s]+0.4*noise[i-s-1]+noise[i]
for (i in 14:(m+n))
w3[i]=0.5*w3[i-1]+0.8*w3[i-s]-0.4*w3[i-s-1]+noise[i]
for (i in 14:(m+n))
p[i]=p[i-1]+p[i-s]-p[i-s-1]+w3[i]
return(p[-(1:m)])
}
n=200
#theta=c(0.5,0.2)
theta=c(0, 0.8)
sample=data(n,theta)
sample[1:100]
par(mfrow=c(2,2))
plot(sample,main=" ",ylab="",xlab="",type="l")
acf(sample,12,main=expression(paste(" model")),col="red")
AP=c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118,
115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140,
145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166,
171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194,
196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201,
204, 188, 235, 227, 234, 264, 302, 293, 259 ,229, 203, 229,
242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278,
284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306,
315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336,
340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337,
360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405,
417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432)
length(AP)#144
#plot(AP, ylab="Passengers (1000s)", type="o", pch =20,col="blue")
x=ts(AP, start = c(1949, 1), end = c(1960, 12), frequency=12)
plot.ts(x,xlab="date",ylab="Passengers",col="blue")
title(main="International Airline Passengers from 1949 to 1960")
AP=c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118,
115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140,
145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166,
171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194,
196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201,
204, 188, 235, 227, 234, 264, 302, 293, 259 ,229, 203, 229,
242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278,
284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306,
315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336,
340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337,
360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405,
417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432)
length(AP)#144
#plot(AP, ylab="Passengers (1000s)", type="o", pch =20,col="blue")
x=ts(AP, start = c(1949, 1), end = c(1960, 12), frequency=12)
plot.ts(x,xlab="date",ylab="Passengers",col="blue")
title(main="International Airline Passengers from 1949 to 1960")
#Step 1
lgAP=log(AP)
par(mfrow=c(2,2))
x=ts(lgAP, start = c(1949, 1), end = c(1960, 12), frequency=12)
plot.ts(x,xlab="date",ylab="Passengers",col="blue")
title(main="International Airline Passengers from 1949 to 1960")
w1=diff(lgAP)
plot(w1,xlab=" ",ylab=" ",main="w1 ",type="l",col="red",ylim=c(-0.35,0.35))
w2=diff(lgAP,12)
plot(w2,xlab=" ",ylab=" ",main="w2 ",type="l",col="red",ylim=c(-0.1,0.35))
w3=diff(diff(lgAP,12))
plot(w3,xlab=" ",ylab=" ",main="w3 ",type="l",col="red",ylim=c(-0.35,0.35))
par(mfrow=c(2,2))
acf(w3,15,main="",col="red",ylim=c(-0.5,1))
pacf(w3,15,main="",col="red",ylim=c(-0.5,1))
#step 5 Estimate the parameters
est=arima(w3, c(1, 0, 0), seasonal = list(order = c(1,0, 0),  period = 12))
est
Box.test(est$residuals,lag=12,type="Ljung")
pv=1-pchisq(13.89,10) #Compute p-value using 10 degrees of freedom
pv
#Step 7: Try other models
est=arima(w3, c(0, 0, 1), seasonal = list(order = c(0,0,1),include.mean = FALSE, period = 12))
est
Box.test(est$residuals,lag=12,type="Ljung")
pv=1-pchisq(8.6391,10) #Compute p-value using 10 degrees of freedom
pv
est=arima(lgAP,c(0, 1, 1), seasonal = list(order = c(0,1,1), period = 12))
est
#Step 9:Forecasting
forecast=predict(est, n.ahead =12)
forecast$pred
forecast$se
U=forecast$pred +1.96 * forecast$se
L=forecast$pred - 1.96 * forecast$se
fore1=exp(forecast$pred+forecast$se*forecast$se/2)
U1=exp(U)
L1=exp(L)
fore1
U1
L1
U2=append(AP[144], U1)
L2=append(AP[144],L1)
fore2=append(AP,fore1)
fore3=append(AP[144],fore1)
fore2
U2
L2
plot(1:32,fore2[125:156],ylim=c(200,800),type="o", ylab="",xlab="",main="Forecasting")
lines(20:32,fore3,type="o",col="red")
lines(20:32, U2,type="l",col="blue")
lines(20:32, L2,type="l",col="blue")
legend(x="topleft",c("True returns","prediction"),lty=c(1,1),pch=c(1,1),col=c("black","red"))
AP=c( .71,   .63,  .85,   .44,  .61,   .69,   .92,   .55 ,  .72 ,
.77 ,  .92 ,  .6 ,  .83 ,  .8 ,  1 ,  .77,   .92 ,  1 ,  1.24,
1,  1.16,   1.3,  1.45,   1.25,   1.26,   1.38,   1.86,  1.56,   1.53,
1.59,   1.83,   1.86,   1.53,   2.07,   2.34,   2.25,   2.16,   2.43,
2.7,   2.25,   2.79,   3.42,   3.69,   3.6,   3.6,   4.32,   4.32,
4.05,   4.86,   5.04,   5.04,   4.41,   5.58,   5.85,   6.57,   5.31,
6.03,   6.39,   6.93,   5.85,   6.93,   7.74,   7.83,   6.12,   7.74,
8.91,   8.28,   6.84,   9.54,   10.26,   9.54,   8.73,   11.88,   12.06,
12.15,   8.91,   14.04,   12.96,   14.85,   9.99,   16.2,   14.67,   16.02,
11.61 )
length(AP)#84#
par(mfrow=c(2,2))
plot(AP, ylab="Passengers (1000s)", type="o", pch =20,col="blue")
x=ts(AP, start = c(1960, 1), end = c(1980, 4), frequency=4)
plot.ts(x,xlab="date",ylab="earnings",col="blue")
title(main="Quarterly earnings of Johnson and Johmson:from 1960 to 1980")
lgAP=log(AP)
plot(lgAP, ylab="Passengers (1000s)", type="o", pch =20,col="blue")
w1=diff(lgAP)
plot(w1,xlab=" ",ylab=" ",main="w1 ",type="l",col="red",ylim=c(-0.5,0.5))
w2=diff(lgAP,4)
plot(w2,xlab=" ",ylab=" ",main="w2 ",type="l",col="red",ylim=c(-0.5,0.5))
par(mfrow=c(2,2))
w3=diff(diff(lgAP,4))
par(mfrow=c(2,2))
plot(w3,xlab=" ",ylab=" ",main="w3 ",type="l",col="red",ylim=c(-0.5,0.5))
acf(w3,15,main="",col="red",ylim=c(-0.5,1))
pacf(w3,15,main="",col="red",ylim=c(-0.5,1))
est=arima(w3, c(1, 0, 0), seasonal = list(order = c(1,0, 0),  period = 4))
est
#Step 6: Diagnostic checking.
Box.test(est$residuals,lag=12,type="Ljung")
pv=1-pchisq(12.068,10) #Compute p-value using 10 degrees of freedom
pv
est=arima(w3, c(0, 0, 1), seasonal = list(order = c(0,0,1),include.mean = FALSE, period = 4))
est
Box.test(est$residuals,lag=12,type="Ljung")
pv=1-pchisq(10.16,10) #Compute p-value using 10 degrees of freedom
pv
est=arima(lgAP,c(0, 1, 1), seasonal = list(order = c(0,1,1), period = 4))
est
#Step 9:Forecasting
forecast=predict(est, n.ahead =12)
forecast$pred
forecast$se
U=forecast$pred +1.96 * forecast$se
L=forecast$pred - 1.96 * forecast$se
U
L
fore1=exp(forecast$pred+forecast$se*forecast$se/2)
U1=exp(U)
L1=exp(L)
fore1
U1
L1
U2=append(AP[84], U1)
L2=append(AP[84],L1)
fore2=append(AP,fore1)
fore3=append(AP[84],fore1)
fore2
U2
L2
plot(1:32,fore2[65:96],ylim=c(5,45),type="o", ylab="",xlab="",main="Forecasting")
lines(20:32,fore3,type="o",col="red")
lines(20:32, U2,type="l",col="blue")
lines(20:32, L2,type="l",col="blue")
legend(x="topleft",c("True returns","prediction"),lty=c(1,1),pch=c(1,1),col=c("black","red"))
AP=c( 9.26910,  9.24650,  9.26390,
9.27840,  9.31470,  9.39320,  9.42300,  9.43420,  9.46270,
9.39070,  9.35310,  9.30260,  9.30760,  9.30610,  9.29380,
9.30190,  9.33650,  9.41500,  9.46160,  9.51500,  9.48960,
9.45200,  9.38290,  9.30360,  9.27450,  9.26800,  9.27230,
9.31070,  9.33830,  9.39620,  9.43000,  9.44940,  9.46640,
9.39740,  9.36930,  9.31220,  9.28310,  9.25990,  9.26860,
9.28720,  9.32190,  9.43810,  9.47730,  9.48780,  9.49960,
9.39920,  9.37470,  9.36040,  9.33440,  9.35300,  9.31610,
9.31000,  9.32660,  9.37150,  9.44690,  9.44270,  9.46490,
9.41160,  9.36130,  9.34030,  9.31330,  9.28290,  9.31370,
9.34150,  9.34540,  9.47460,  9.50050,  9.50410,  9.51000,  9.45120,
9.38370,  9.38270,  9.35470,  9.33800,  9.33280,  9.36900,
9.37580,  9.46390,  9.51380,  9.53020,  9.54160,  9.47980,
9.40810,  9.39660,  9.39540,  9.37490,  9.35310,  9.37530,
9.42420,  9.47900,  9.50990,  9.53040,  9.56730,  9.51540,
9.45000,  9.44420,  9.44410,  9.44060,  9.45050,  9.47630,
9.48200,  9.56800,  9.64170,  9.64420,  9.67020,  9.59300,
9.52450,  9.52110,  9.47210,  9.47570,  9.47600,  9.48480,
9.50230,  9.58070,  9.64500,  9.64480,  9.63050,  9.57080,
9.53190,  9.50090,  9.46230,  9.47090,  9.44920,  9.47160,
9.51330,  9.58970,  9.62150,  9.64540,  9.64640,  9.58250,
9.54850,  9.52110,  9.45080,  9.44920,  9.46950,  9.48200,
9.51310,  9.58770,  9.66680,  9.67720,  9.70840,  9.62710,
9.57210,  9.51980,  9.50230,  9.51490,  9.55320,  9.54880,
9.58800,  9.68300,  9.72540,  9.73420,  9.73930,  9.66830,
9.62690,  9.58360,  9.57250,  9.55990,  9.57980,  9.62420,
9.64790,  9.72450,  9.74650,  9.78710,  9.79780,  9.70650,
9.68150,  9.64710,  9.66780,  9.63190,  9.62900,  9.65510,
9.66810,  9.77100,  9.80250,  9.83500,  9.82090,  9.78650,
9.68430,  9.68270,  9.65030,  9.66100,  9.65420,  9.66050,
9.71160,  9.78310,  9.83060,  9.83210,  9.84010,  9.77140,
9.70730,  9.68050,  9.67860,  9.65780,  9.66910,  9.65710,
9.69620,  9.79510,  9.82280,  9.87190,  9.86640,  9.78450,
9.74430,  9.72900,  9.72920,  9.66810,  9.68810,  9.71690,
9.72560,  9.83730,  9.87150,  9.83730,  9.87440,  9.82730,
9.72300,  9.74030,  9.73420,  9.70780,  9.70990,  9.71860,
9.76840,  9.84300,  9.89160,  9.91410,  9.90500,  9.86630,
9.80320,  9.80500,  9.78050,  9.73940,  9.72410,  9.77010,
9.82140,  9.92030,  9.91560,  9.93870,  9.94470,  9.84490,  9.81800,
9.79150,  9.76960,  9.75590,  9.78040,  9.81660,  9.82450,
9.89910,  9.92290,  9.95770,  9.96850,  9.92790,  9.87150,
9.83230,  9.84110,  9.81280,  9.85440,  9.86250,  9.90170,
9.98570,  10.02840,  10.04990,  10.05980,  9.97220,  9.90800,
9.90600)
length(AP)#264#plot(AP, ylab="Passengers (1000s)", type="o", pch =20,col="blue")
x=ts(AP, start = c(1972, 1), end = c(1993, 12), frequency=12)
par(mfrow=c(2,2))
plot.ts(x,xlab="date",ylab="Power",col="blue")
title(main="Power")
lgAP=log(AP)
#Step 2
w1=diff(lgAP)
plot(w1,xlab=" ",ylab=" ",main="w1 ",type="l",col="red",ylim=c(-0.02,0.02))
w2=diff(lgAP,12)
plot(w2,xlab=" ",ylab=" ",main="w2 ",type="l",col="red",ylim=c(-0.02,0.02))
w3=diff(diff(lgAP,12))
plot(w3,xlab=" ",ylab=" ",main="w3 ",type="l",col="red",ylim=c(-0.02,0.02))
#unitrootTest(w3,lags=1,type=c("c"))
#Step 4 Choose p and q
par(mfrow=c(2,2))
acf(w3,15,main="",col="red",ylim=c(-0.5,1))
pacf(w3,15,main="",col="red",ylim=c(-0.5,1))
est=arima(w3, c(1, 0, 0), seasonal = list(order = c(1,0, 0),  period = 12))
est
#Step 6: Diagnostic checking.
Box.test(est$residuals,lag=12,type="Ljung")
pv=1-pchisq(28.814,10) #Compute p-value using 10 degrees of freedom
pv
#Step 7: Try other models
est=arima(w3, c(0, 0, 1), seasonal = list(order = c(0,0,1),include.mean = FALSE, period = 12))
est
Box.test(est$residuals,lag=12,type="Ljung")
pv=1-pchisq(9.3345,10) #Compute p-value using 10 degrees of freedom
pv
est=arima(lgAP,c(0, 1, 1), seasonal = list(order = c(0,1,1), period = 12))
est
#Step 9:Forecasting
forecast=predict(est, n.ahead =12)
forecast$pred
forecast$se
U=forecast$pred +1.96 * forecast$se
L=forecast$pred - 1.96 * forecast$se
U
L
fore1=exp(forecast$pred+forecast$se*forecast$se/2)
U1=exp(U)
L1=exp(L)
fore1
U1
L1
U2=append(AP[264], U1)
L2=append(AP[264],L1)
fore2=append(AP,fore1)
fore3=append(AP[264],fore1)
fore2
U2
L2
plot(1:32,fore2[245:276],ylim=c(9.5,10.5),type="o", ylab="",xlab="",main="Forecasting")
lines(20:32,fore3,type="o",col="red")
lines(20:32, U2,type="l",col="blue")
lines(20:32, L2,type="l",col="blue")
legend(x="topleft",c("True returns","prediction"),lty=c(1,1),pch=c(1,1),col=c("black","red"))
rm(list = ls())
## remove (almost) everything in the working environment.
#textbook page123
setwd("C:/ling/teaching/teaching/MSBD5006MSDM5053/Lecture-7/R")  #set my working directory
#Purpose: build a simple ARCH model for the monthly log returns of Intel stock
da=read.table("m-intc7308.txt",header=T)[,2]
plot(da,type="l")
rm(list = ls())
## remove (almost) everything in the working environment.
#textbook page123
setwd("C:/ling/teaching/teaching/MSBD5006MSDM5053/Lecture-7/R")  #set my working directory
#Purpose: build a simple ARCH model for the monthly log returns of Intel stock
da=read.table("m-intc7308.txt",header=T)[,2]
plot(da,type="l")
acf(da,20,main="",col="red",ylim=c(-0.2,1))
pacf(da,20,main="",col="red",ylim=c(-0.2,1))
acf(da,20,main="",col="red",ylim=c(-0.2,1))
Box.test(da,lag=12,type="Ljung")
at=da-mean(da)
acf(at^2,20,main="",col="red",ylim=c(-0.2,0.4))
Box.test(at^2,lag=12,type="Ljung")
rm(list = ls())
## remove (almost) everything in the working environment.
#textbook page123
setwd("C:/ling/teaching/teaching/MSBD5006MSDM5053/Lecture-7/R")  #set my working directory
#########Example3.3 page134
#library(fGarch)
sp5=scan(file="sp500.txt") # Load data
plot(sp5,type="l")
acf(sp5,20,main="",col="red",ylim=c(-1,1))
Box.test(sp5,lag=12,type="Ljung")
at=sp5-mean(sp5)
acf(at^2,20,main="",col="red",ylim=c(-1,1))
pacf(sp5^2,20,main="",col="red",ylim=c(-1,1))
Box.test(sp5^2,lag=12,type="Ljung")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
#simulation for GARCH(1,1) model
library(fGarch) # Load the package
data=function(n,alpha){
m=2000
noise=rnorm(n+m)
a=numeric(m+n)
h=numeric(m+n)
r=numeric(m+n)
for (i in 2:(m+n))
h[i]=alpha[1]+(alpha[2]*noise[i-1]*noise[i-1]+alpha[3])*h[i-1]
for (i in 2:(m+n))
a[i]=sqrt(h[i])*noise[i]
for (i in 2:(m+n))
r[i]=alpha[4]*r[i-1]+a[i]
return(h[-(1:m)])
}
n=1000
alpha=c(0.1,0.15,0.8,0.0)
sample=data(n, alpha)
sample[1:100]
plot(sample,main=" ",ylab="",xlab="",type="l")
acf(sample,10,main=expression(paste("GARCH(1,1)")),col="red")
Box.test(sample,lag=12,type="Ljung")
acf(sample,10,main=expression(paste("GARCH(1,1)")),col="red")
Box.test(sample,lag=12,type="Ljung")
